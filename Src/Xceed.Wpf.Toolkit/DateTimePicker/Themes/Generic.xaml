<!--
    ***********************************************************************************
    
    Toolkit for WPF
    
    Copyright (C) 2007-2018 Xceed Software Inc.
    
    This program is provided to you under the terms of the Microsoft Public
    License (Ms-PL) as published at http://wpftoolkit.codeplex.com/license
    
    For more features, controls, and fast professional support,
    pick up the Plus Edition at https://xceed.com/xceed-toolkit-plus-for-wpf/
    
    Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids
    
    **********************************************************************************
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="..\..\Themes\Generic\Glyphs.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl
            Margin="0,0,3,0"
            Content="{Binding}"
            Focusable="False"
            Foreground="Gray" />
    </DataTemplate>

    <LinearGradientBrush x:Key="PopupDarkBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="#FFA3AEB9" />
        <GradientStop Offset="0.375" Color="#FF8399A9" />
        <GradientStop Offset="0.375" Color="#FF718597" />
        <GradientStop Offset="1" Color="#FF617584" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFffffff" />
                <GradientStop Offset="1" Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="DateTimePickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <chrome:ButtonChrome
                            x:Name="ToggleButtonChrome"
                            CornerRadius="0,2.75,2.75,0"
                            RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:DateTimePicker}}"
                            RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:DateTimePicker}}"
                            RenderMouseOver="{TemplateBinding IsMouseOver}"
                            RenderPressed="{TemplateBinding IsPressed}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <Grid
                                    x:Name="arrowGlyph"
                                    Grid.Column="1"
                                    Margin="5"
                                    IsHitTestVisible="False">
                                    <Path
                                        x:Name="Arrow"
                                        Width="9"
                                        Height="5"
                                        Margin="0,1,0,0"
                                        Data="{StaticResource DownArrowGeometry}"
                                        Fill="#FF000000" />
                                </Grid>
                            </Grid>
                        </chrome:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ===============================================================================  -->
    <!--  DateTimePicker  -->
    <!--  ===============================================================================  -->

    <Style TargetType="{x:Type local:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="CalendarWidth" Value="178" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <local:ButtonSpinner
                                    x:Name="PART_Spinner"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalContentAlignment="Stretch"
                                    AllowSpin="{TemplateBinding AllowSpin}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                    IsTabStop="False"
                                    ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <local:WatermarkTextBox
                                        x:Name="PART_TextBox"
                                        MinWidth="20"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        AcceptsReturn="False"
                                        Background="Transparent"
                                        BorderThickness="0"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontStretch="{TemplateBinding FontStretch}"
                                        FontStyle="{TemplateBinding FontStyle}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        Foreground="{TemplateBinding Foreground}"
                                        IsTabStop="True"
                                        IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                        TabIndex="{TemplateBinding TabIndex}"
                                        Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                        TextAlignment="{TemplateBinding TextAlignment}"
                                        TextWrapping="NoWrap"
                                        Watermark="{TemplateBinding Watermark}"
                                        WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                                </local:ButtonSpinner>
                                <ToggleButton
                                    x:Name="_calendarToggleButton"
                                    Grid.Column="1"
                                    Background="White"
                                    Focusable="False"
                                    IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                    IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                    Style="{StaticResource DateTimePickerToggleButtonStyle}"
                                    Visibility="{TemplateBinding ShowDropDownButton,
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}" />
                            </Grid>
                            <Popup
                                x:Name="PART_Popup"
                                IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}"
                                StaysOpen="False"
                                ToolTip="{x:Static sys:String.Empty}">
                                <Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border
                                    Padding="3"
                                    Background="{StaticResource PopupBackgroundBrush}"
                                    BorderBrush="{StaticResource PopupDarkBorderBrush}"
                                    BorderThickness="1">
                                    <StackPanel>
                                        <Calendar
                                            x:Name="PART_Calendar"
                                            BorderThickness="0"
                                            DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Calendar.Template>
                                                <ControlTemplate TargetType="{x:Type Calendar}">
                                                    <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource AncestorType={x:Type local:DateTimePicker}}}">
                                                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                            <CalendarItem
                                                                x:Name="PART_CalendarItem"
                                                                Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                                Style="{TemplateBinding CalendarItemStyle}" />
                                                        </StackPanel>
                                                    </Viewbox>
                                                </ControlTemplate>
                                            </Calendar.Template>
                                        </Calendar>
                                        <local:TimePicker
                                            x:Name="PART_TimeUpDown"
                                            AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                            ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                            Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                            Format="{TemplateBinding TimeFormat}"
                                            FormatString="{TemplateBinding TimeFormatString}"
                                            IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                            Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                            Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                            Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                            ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                            Step="{TemplateBinding Step}"
                                            Visibility="{TemplateBinding TimePickerVisibility}"
                                            Watermark="{TemplateBinding TimeWatermark}"
                                            WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                            Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
